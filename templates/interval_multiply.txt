struct %main.base_type%Interval*%main.type_name%_interval_multiply(struct Stack*output_stack, struct Stack*local_stack, struct %main.base_type%Interval*a, struct %main.base_type%Interval*b)
{
    struct %main.base_type%Interval*out = ALLOCATE(output_stack, struct %main.base_type%Interval);
    if (%main.type_name%_get_sign(a->min) >= 0)
    {
        if (%main.type_name%_get_sign(b->min) >= 0)
        {
            out->min = %main.multiply%(output_stack, local_stack, a->min, b->min);
            out->max = %main.multiply%(output_stack, local_stack, a->max, b->max);
        }
        else
        {
            out->min = %main.multiply%(output_stack, local_stack, a->max, b->min);
            if (%main.type_name%_get_sign(b->max) <= 0)
            {
                out->max = %main.multiply%(output_stack, local_stack, a->min, b->max);
            }
            else
            {
                out->max = %main.multiply%(output_stack, local_stack, a->max, b->max);
            }
        }
    }
    else if (%main.type_name%_get_sign(a->max) <= 0)
    {
        if (%main.type_name%_get_sign(b->min) >= 0)
        {
            out->min = %main.multiply%(output_stack, local_stack, a->min, b->max);
            out->max = %main.multiply%(output_stack, local_stack, a->max, b->min);
        }
        else
        {
            if (%main.type_name%_get_sign(b->max) <= 0)
            {
                out->min = %main.multiply%(output_stack, local_stack, a->max, b->max);
            }
            else
            {
                out->min = %main.multiply%(output_stack, local_stack, a->min, b->max);
            }
            out->max = %main.multiply%(output_stack, local_stack, a->min, b->min);
        }
    }
    else
    {
        if (%main.type_name%_get_sign(b->min) >= 0)
        {
            out->min = %main.multiply%(output_stack, local_stack, a->min, b->max);
            out->max = %main.multiply%(output_stack, local_stack, a->max, b->max);
        }
        else if (%main.type_name%_get_sign(b->max) <= 0)
        {
            out->min = %main.multiply%(output_stack, local_stack, a->max, b->min);
            out->max = %main.multiply%(output_stack, local_stack, a->min, b->min);
        }
        else
        {
            void*local_stack_savepoint = local_stack->cursor;
            out->min = %main.type_name%_copy(output_stack, %main.type_name%_get_min(output_stack, local_stack,
                %main.multiply%(local_stack, output_stack, a->min, b->max),
                %main.multiply%(local_stack, output_stack, a->max, b->min)));
            out->max = %main.type_name%_copy(output_stack, %main.type_name%_get_max(output_stack, local_stack,
                %main.multiply%(local_stack, output_stack, a->min, b->min),
                %main.multiply%(local_stack, output_stack, a->max, b->max)));
            local_stack->cursor = local_stack_savepoint;
        }
    }
    return out;
}