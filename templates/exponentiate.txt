struct %main.base_type%*%main.type_name%_exponentiate(struct Stack*restrict output_stack, struct Stack*restrict local_stack, struct %main.base_type%*base, struct Integer*exponent#main.has_misc_parameter, struct %misc.base_type%*%main.misc_name%#)
{
    if (!exponent->value_count)
    {
        return %main.multiplicative_identity%;
    }
    void*local_stack_savepoint = local_stack->cursor;
    struct %main.base_type%*out = %main.multiplicative_identity%;
    while (true)
    {
        if (exponent->value[0] & 1)
        {
            out = %main.multiply%(local_stack, output_stack, out, base#main.has_misc_parameter, %main.misc_name%#);
        }
        exponent = integer_halve(local_stack, exponent);
        if (!exponent->value_count)
        {
            out = %main.base_type_name%_copy(output_stack, out);
            local_stack->cursor = local_stack_savepoint;
            return out;
        }
        base = %main.multiply%(local_stack, output_stack, base, base#main.has_misc_parameter, %main.misc_name%#);
    }
}