size_t %main.type_name%_squarefree_factor(struct Stack*restrict output_stack, struct Stack*restrict local_stack, struct %main.base_type%*a, struct %main.base_type%**out#main.has_misc_parameter, struct %misc.base_type%*%main.misc_name%#)
{
    void*local_stack_savepoint = local_stack->cursor;
    size_t factor_count = 0;
    struct %main.base_type%*b = a;
    struct %main.base_type%*c = %main.base_type_name%_get_derivative(local_stack, output_stack, a);
    a = %main.type_name%_get_gcd(local_stack, output_stack, b, c#main.has_misc_parameter, %main.misc_name%#);
    struct %main.base_type%Division division;
    %main.type_name%_euclidean_divide(local_stack, output_stack, &division, b, a#main.has_misc_parameter, %main.misc_name%#);
    b = division.quotient;
    do
    {
        %main.type_name%_euclidean_divide(local_stack, output_stack, &division, c, a#main.has_misc_parameter, %main.misc_name%#);
        c = %main.subtract%(local_stack, output_stack, division.quotient, %main.base_type_name%_get_derivative(local_stack, output_stack, b));
        a = %main.type_name%_get_gcd(output_stack, local_stack, b, c#main.has_misc_parameter, %main.misc_name%#);
        if (a->coefficient_count > 1)
        {
            out[factor_count] = a;
            ++factor_count;
        }
        %main.type_name%_euclidean_divide(local_stack, output_stack, &division, b, a#main.has_misc_parameter, %main.misc_name%#);
        b = division.quotient;
    } while (b->coefficient_count > 1);
    local_stack->cursor = local_stack_savepoint;
    return factor_count;
}